// <auto-generated />
using CoffeeReview;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoffeeReview.Migrations
{
    [DbContext(typeof(CoffeeContext))]
    [Migration("20191018140203_UpdatingDescription")]
    partial class UpdatingDescription
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoffeeReview.Models.Coffee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Kind");

                    b.HasKey("Id");

                    b.ToTable("Coffee");

                    b.HasData(
                        new { Id = 1, Brand = "Cleveland Coffee", Description = "Light to medium Roast Costa Rican and Dark roast Hondauran. Organic, Fair Trade, Shade Grown Balanced acidity, clean flavorful cup", ImageUrl = "/images/brightsideblend.jpg", Kind = "Bright Side Blend" },
                        new { Id = 2, Brand = "Cleveland Coffee", Description = "Full Medium Roast Specialty Grade Crisp, Citrus tones, Nice Finish", ImageUrl = " /images/tanzanianpeaberry.jpg", Kind = "Tanzanian Peaberry" },
                        new { Id = 3, Brand = "Rising Star", Description = "Eastern Highlands, Papua New Guinea. Notes of: plum, blood orange, chocolate malt. ", ImageUrl = "/images/apocooperative.jpg", Kind = "Apo Cooperative" },
                        new { Id = 4, Brand = "Starbucks", Description = "Region: Asia-Pacific. Notes of Cedary Spice and Herbs.  ", ImageUrl = "/images/komododragon.jpg", Kind = "Komodo Dragon" },
                        new { Id = 5, Brand = "8 O'Clock", Description = "Medium Roast. Sweet, fruity and well balanced", ImageUrl = "/images/theoriginal.jpg", Kind = "The Original" },
                        new { Id = 6, Brand = "Brioso", Description = "San Pascual Columbian. Notes of Fruit punch and creamy mouthfeel", ImageUrl = "/images/colombiasantabarbara.jpg", Kind = "Santa Barbara Estate" },
                        new { Id = 7, Brand = "8 O'Clock", Description = "Dark Roast. Espresso Style, Smooth, Full-Bodied", ImageUrl = "/images/redeyeroast.jpg", Kind = "Red Eye Roast" },
                        new { Id = 8, Brand = "Peets", Description = "Dark Roast from Americas. Notes of sun-ripened cherry fruit and intense, bright Meyer lemon citrus-acidity.", ImageUrl = "/images/costaricapeaberry.jpg", Kind = "Costa Rica Peaberry" },
                        new { Id = 9, Brand = "Dunkin' Donuts", Description = "Medium Roast. Decaffinated Coffee that almost tastes like normal Coffee", ImageUrl = "/images/dunkindecaf.jpg", Kind = "Dunkin Decaf" }
                    );
                });

            modelBuilder.Entity("CoffeeReview.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoffeeId");

                    b.Property<string>("Content");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeId");

                    b.ToTable("Review");

                    b.HasData(
                        new { Id = 1, CoffeeId = 1, Content = "Splendid, I must say. Gracious upon the first sip jolly ole chaps." },
                        new { Id = 2, CoffeeId = 2, Content = "Quite awful in taste and overall quality mate. Do not recommend this one for a night out with the chaps" },
                        new { Id = 3, CoffeeId = 3, Content = "Good for a wee bit of a wakeup but not a particular favorite of mine" },
                        new { Id = 4, CoffeeId = 4, Content = "Absolutely splendid chaps!!" },
                        new { Id = 5, CoffeeId = 5, Content = "Golly gee, this was a wee bit AWFUL" },
                        new { Id = 6, CoffeeId = 6, Content = "I was absolutely stunned when I tried this! Will definitely be sharing with a few of my chaps" },
                        new { Id = 7, CoffeeId = 7, Content = "Oh I hate to be a damper here but gosh I hated this one, an awful aftertaste ruins an otherwise ok taste" },
                        new { Id = 8, CoffeeId = 8, Content = "I almost thought I enjoyed this one but after about half a cup and a crumpet, my tummy hurt. 10/10 would not recommend to the chaps" },
                        new { Id = 9, CoffeeId = 9, Content = "Another favorite for my chaps and I. Good for a biscuit in the morning or a crumpet at night" },
                        new { Id = 10, CoffeeId = 4, Content = "James loves this coffee" },
                        new { Id = 11, CoffeeId = 5, Content = "OMG THIS IS THE BEST COFFEE EVER" }
                    );
                });

            modelBuilder.Entity("CoffeeReview.Models.Review", b =>
                {
                    b.HasOne("CoffeeReview.Models.Coffee", "Coffee")
                        .WithMany("Reviews")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
